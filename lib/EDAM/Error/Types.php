<?php
namespace EDAM\Error;

/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class EDAMErrorCode {
  const UNKNOWN = 1;
  const BAD_DATA_FORMAT = 2;
  const PERMISSION_DENIED = 3;
  const INTERNAL_ERROR = 4;
  const DATA_REQUIRED = 5;
  const LIMIT_REACHED = 6;
  const QUOTA_REACHED = 7;
  const INVALID_AUTH = 8;
  const AUTH_EXPIRED = 9;
  const DATA_CONFLICT = 10;
  const ENML_VALIDATION = 11;
  const SHARD_UNAVAILABLE = 12;
  const LEN_TOO_SHORT = 13;
  const LEN_TOO_LONG = 14;
  const TOO_FEW = 15;
  const TOO_MANY = 16;
  const UNSUPPORTED_OPERATION = 17;
  static public $__names = array(
    1 => 'UNKNOWN',
    2 => 'BAD_DATA_FORMAT',
    3 => 'PERMISSION_DENIED',
    4 => 'INTERNAL_ERROR',
    5 => 'DATA_REQUIRED',
    6 => 'LIMIT_REACHED',
    7 => 'QUOTA_REACHED',
    8 => 'INVALID_AUTH',
    9 => 'AUTH_EXPIRED',
    10 => 'DATA_CONFLICT',
    11 => 'ENML_VALIDATION',
    12 => 'SHARD_UNAVAILABLE',
    13 => 'LEN_TOO_SHORT',
    14 => 'LEN_TOO_LONG',
    15 => 'TOO_FEW',
    16 => 'TOO_MANY',
    17 => 'UNSUPPORTED_OPERATION',
  );
}

class EDAMUserException extends TException {
  static $_TSPEC;

  public $errorCode = null;
  public $parameter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'parameter',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EDAMUserException';
  }

  public function read($input)
  {
    return $this->_read('EDAMUserException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EDAMUserException', self::$_TSPEC, $output);
  }
}

class EDAMSystemException extends TException {
  static $_TSPEC;

  public $errorCode = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EDAMSystemException';
  }

  public function read($input)
  {
    return $this->_read('EDAMSystemException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EDAMSystemException', self::$_TSPEC, $output);
  }
}

class EDAMNotFoundException extends TException {
  static $_TSPEC;

  public $identifier = null;
  public $key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'identifier',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EDAMNotFoundException';
  }

  public function read($input)
  {
    return $this->_read('EDAMNotFoundException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EDAMNotFoundException', self::$_TSPEC, $output);
  }
}


