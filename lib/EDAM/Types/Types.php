<?php
namespace EDAM\Types;

/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class PrivilegeLevel {
  const NORMAL = 1;
  const PREMIUM = 3;
  const MANAGER = 7;
  const SUPPORT = 8;
  const ADMIN = 9;
  static public $__names = array(
    1 => 'NORMAL',
    3 => 'PREMIUM',
    7 => 'MANAGER',
    8 => 'SUPPORT',
    9 => 'ADMIN',
  );
}

final class QueryFormat {
  const USER = 1;
  const SEXP = 2;
  static public $__names = array(
    1 => 'USER',
    2 => 'SEXP',
  );
}

final class NoteSortOrder {
  const CREATED = 1;
  const UPDATED = 2;
  const RELEVANCE = 3;
  const UPDATE_SEQUENCE_NUMBER = 4;
  const TITLE = 5;
  static public $__names = array(
    1 => 'CREATED',
    2 => 'UPDATED',
    3 => 'RELEVANCE',
    4 => 'UPDATE_SEQUENCE_NUMBER',
    5 => 'TITLE',
  );
}

final class PremiumOrderStatus {
  const NONE = 0;
  const PENDING = 1;
  const ACTIVE = 2;
  const FAILED = 3;
  const CANCELLATION_PENDING = 4;
  const CANCELED = 5;
  static public $__names = array(
    0 => 'NONE',
    1 => 'PENDING',
    2 => 'ACTIVE',
    3 => 'FAILED',
    4 => 'CANCELLATION_PENDING',
    5 => 'CANCELED',
  );
}

final class SharedNotebookPrivilegeLevel {
  const READ_NOTEBOOK = 0;
  const MODIFY_NOTEBOOK_PLUS_ACTIVITY = 1;
  const READ_NOTEBOOK_PLUS_ACTIVITY = 2;
  const GROUP = 3;
  const FULL_ACCESS = 4;
  const BUSINESS_FULL_ACCESS = 5;
  static public $__names = array(
    0 => 'READ_NOTEBOOK',
    1 => 'MODIFY_NOTEBOOK_PLUS_ACTIVITY',
    2 => 'READ_NOTEBOOK_PLUS_ACTIVITY',
    3 => 'GROUP',
    4 => 'FULL_ACCESS',
    5 => 'BUSINESS_FULL_ACCESS',
  );
}

final class SponsoredGroupRole {
  const GROUP_MEMBER = 1;
  const GROUP_ADMIN = 2;
  const GROUP_OWNER = 3;
  static public $__names = array(
    1 => 'GROUP_MEMBER',
    2 => 'GROUP_ADMIN',
    3 => 'GROUP_OWNER',
  );
}

final class BusinessUserRole {
  const ADMIN = 1;
  const NORMAL = 2;
  static public $__names = array(
    1 => 'ADMIN',
    2 => 'NORMAL',
  );
}

final class SharedNotebookInstanceRestrictions {
  const ONLY_JOINED_OR_PREVIEW = 1;
  const NO_SHARED_NOTEBOOKS = 2;
  static public $__names = array(
    1 => 'ONLY_JOINED_OR_PREVIEW',
    2 => 'NO_SHARED_NOTEBOOKS',
  );
}

class Data extends TBase {
  static $_TSPEC;

  public $bodyHash = null;
  public $size = null;
  public $body = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bodyHash',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Data';
  }

  public function read($input)
  {
    return $this->_read('Data', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Data', self::$_TSPEC, $output);
  }
}

class UserAttributes extends TBase {
  static $_TSPEC;

  public $defaultLocationName = null;
  public $defaultLatitude = null;
  public $defaultLongitude = null;
  public $preactivation = null;
  public $viewedPromotions = null;
  public $incomingEmailAddress = null;
  public $recentMailedAddresses = null;
  public $comments = null;
  public $dateAgreedToTermsOfService = null;
  public $maxReferrals = null;
  public $referralCount = null;
  public $refererCode = null;
  public $sentEmailDate = null;
  public $sentEmailCount = null;
  public $dailyEmailLimit = null;
  public $emailOptOutDate = null;
  public $partnerEmailOptInDate = null;
  public $preferredLanguage = null;
  public $preferredCountry = null;
  public $clipFullPage = null;
  public $twitterUserName = null;
  public $twitterId = null;
  public $groupName = null;
  public $recognitionLanguage = null;
  public $customerProfileId = null;
  public $referralProof = null;
  public $educationalDiscount = null;
  public $businessAddress = null;
  public $hideSponsorBilling = null;
  public $taxExempt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'defaultLocationName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'defaultLatitude',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'defaultLongitude',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'preactivation',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'viewedPromotions',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'incomingEmailAddress',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'recentMailedAddresses',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'comments',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'dateAgreedToTermsOfService',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'maxReferrals',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'referralCount',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'refererCode',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'sentEmailDate',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'sentEmailCount',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'dailyEmailLimit',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'emailOptOutDate',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'partnerEmailOptInDate',
          'type' => TType::I64,
          ),
        20 => array(
          'var' => 'preferredLanguage',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'preferredCountry',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'clipFullPage',
          'type' => TType::BOOL,
          ),
        23 => array(
          'var' => 'twitterUserName',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'twitterId',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'groupName',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'recognitionLanguage',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'customerProfileId',
          'type' => TType::I64,
          ),
        28 => array(
          'var' => 'referralProof',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'educationalDiscount',
          'type' => TType::BOOL,
          ),
        30 => array(
          'var' => 'businessAddress',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'hideSponsorBilling',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'taxExempt',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserAttributes';
  }

  public function read($input)
  {
    return $this->_read('UserAttributes', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserAttributes', self::$_TSPEC, $output);
  }
}

class Accounting extends TBase {
  static $_TSPEC;

  public $uploadLimit = null;
  public $uploadLimitEnd = null;
  public $uploadLimitNextMonth = null;
  public $premiumServiceStatus = null;
  public $premiumOrderNumber = null;
  public $premiumCommerceService = null;
  public $premiumServiceStart = null;
  public $premiumServiceSKU = null;
  public $lastSuccessfulCharge = null;
  public $lastFailedCharge = null;
  public $lastFailedChargeReason = null;
  public $nextPaymentDue = null;
  public $premiumLockUntil = null;
  public $updated = null;
  public $premiumSubscriptionNumber = null;
  public $lastRequestedCharge = null;
  public $currency = null;
  public $unitPrice = null;
  public $businessId = null;
  public $businessName = null;
  public $businessRole = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uploadLimit',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'uploadLimitEnd',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'uploadLimitNextMonth',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'premiumServiceStatus',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'premiumOrderNumber',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'premiumCommerceService',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'premiumServiceStart',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'premiumServiceSKU',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'lastSuccessfulCharge',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'lastFailedCharge',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'lastFailedChargeReason',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'nextPaymentDue',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'premiumLockUntil',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'updated',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'premiumSubscriptionNumber',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'lastRequestedCharge',
          'type' => TType::I64,
          ),
        18 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'unitPrice',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'businessId',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'businessName',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'businessRole',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Accounting';
  }

  public function read($input)
  {
    return $this->_read('Accounting', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Accounting', self::$_TSPEC, $output);
  }
}

class PremiumInfo extends TBase {
  static $_TSPEC;

  public $currentTime = null;
  public $premium = null;
  public $premiumRecurring = null;
  public $premiumExpirationDate = null;
  public $premiumExtendable = null;
  public $premiumPending = null;
  public $premiumCancellationPending = null;
  public $canPurchaseUploadAllowance = null;
  public $sponsoredGroupName = null;
  public $sponsoredGroupRole = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'currentTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'premium',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'premiumRecurring',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'premiumExpirationDate',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'premiumExtendable',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'premiumPending',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'premiumCancellationPending',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'canPurchaseUploadAllowance',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'sponsoredGroupName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'sponsoredGroupRole',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'PremiumInfo';
  }

  public function read($input)
  {
    return $this->_read('PremiumInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('PremiumInfo', self::$_TSPEC, $output);
  }
}

class User extends TBase {
  static $_TSPEC;

  public $id = null;
  public $username = null;
  public $email = null;
  public $name = null;
  public $timezone = null;
  public $privilege = null;
  public $created = null;
  public $updated = null;
  public $deleted = null;
  public $active = null;
  public $shardId = null;
  public $attributes = null;
  public $accounting = null;
  public $premiumInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'timezone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'privilege',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'created',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'updated',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'deleted',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'active',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'shardId',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\UserAttributes',
          ),
        16 => array(
          'var' => 'accounting',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\Accounting',
          ),
        17 => array(
          'var' => 'premiumInfo',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\PremiumInfo',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'User';
  }

  public function read($input)
  {
    return $this->_read('User', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('User', self::$_TSPEC, $output);
  }
}

class Tag extends TBase {
  static $_TSPEC;

  public $guid = null;
  public $name = null;
  public $parentGuid = null;
  public $updateSequenceNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parentGuid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Tag';
  }

  public function read($input)
  {
    return $this->_read('Tag', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Tag', self::$_TSPEC, $output);
  }
}

class LazyMap extends TBase {
  static $_TSPEC;

  public $keysOnly = null;
  public $fullMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keysOnly',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'fullMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LazyMap';
  }

  public function read($input)
  {
    return $this->_read('LazyMap', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LazyMap', self::$_TSPEC, $output);
  }
}

class ResourceAttributes extends TBase {
  static $_TSPEC;

  public $sourceURL = null;
  public $timestamp = null;
  public $latitude = null;
  public $longitude = null;
  public $altitude = null;
  public $cameraMake = null;
  public $cameraModel = null;
  public $clientWillIndex = null;
  public $recoType = null;
  public $fileName = null;
  public $attachment = null;
  public $applicationData = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sourceURL',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'altitude',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'cameraMake',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'cameraModel',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientWillIndex',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'recoType',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'fileName',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'attachment',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'applicationData',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\LazyMap',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ResourceAttributes';
  }

  public function read($input)
  {
    return $this->_read('ResourceAttributes', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ResourceAttributes', self::$_TSPEC, $output);
  }
}

class Resource extends TBase {
  static $_TSPEC;

  public $guid = null;
  public $noteGuid = null;
  public $data = null;
  public $mime = null;
  public $width = null;
  public $height = null;
  public $duration = null;
  public $active = null;
  public $recognition = null;
  public $attributes = null;
  public $updateSequenceNum = null;
  public $alternateData = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'noteGuid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\Data',
          ),
        4 => array(
          'var' => 'mime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'width',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'height',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'duration',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'active',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'recognition',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\Data',
          ),
        11 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\ResourceAttributes',
          ),
        12 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'alternateData',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\Data',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Resource';
  }

  public function read($input)
  {
    return $this->_read('Resource', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Resource', self::$_TSPEC, $output);
  }
}

class NoteAttributes extends TBase {
  static $_TSPEC;

  public $subjectDate = null;
  public $latitude = null;
  public $longitude = null;
  public $altitude = null;
  public $author = null;
  public $source = null;
  public $sourceURL = null;
  public $sourceApplication = null;
  public $shareDate = null;
  public $placeName = null;
  public $contentClass = null;
  public $applicationData = null;
  public $lastEditedBy = null;
  public $classifications = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'subjectDate',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'altitude',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'author',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'sourceURL',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'sourceApplication',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'shareDate',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'placeName',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'contentClass',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'applicationData',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\LazyMap',
          ),
        24 => array(
          'var' => 'lastEditedBy',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'classifications',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NoteAttributes';
  }

  public function read($input)
  {
    return $this->_read('NoteAttributes', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NoteAttributes', self::$_TSPEC, $output);
  }
}

class Note extends TBase {
  static $_TSPEC;

  public $guid = null;
  public $title = null;
  public $content = null;
  public $contentHash = null;
  public $contentLength = null;
  public $created = null;
  public $updated = null;
  public $deleted = null;
  public $active = null;
  public $updateSequenceNum = null;
  public $notebookGuid = null;
  public $tagGuids = null;
  public $resources = null;
  public $attributes = null;
  public $tagNames = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'contentHash',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'contentLength',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'created',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'updated',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'deleted',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'active',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'notebookGuid',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'tagGuids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        13 => array(
          'var' => 'resources',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Resource',
            ),
          ),
        14 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\NoteAttributes',
          ),
        15 => array(
          'var' => 'tagNames',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Note';
  }

  public function read($input)
  {
    return $this->_read('Note', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Note', self::$_TSPEC, $output);
  }
}

class Publishing extends TBase {
  static $_TSPEC;

  public $uri = null;
  public $order = null;
  public $ascending = null;
  public $publicDescription = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uri',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ascending',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'publicDescription',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Publishing';
  }

  public function read($input)
  {
    return $this->_read('Publishing', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Publishing', self::$_TSPEC, $output);
  }
}

class BusinessNotebook extends TBase {
  static $_TSPEC;

  public $notebookDescription = null;
  public $privilege = null;
  public $recommended = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'notebookDescription',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'privilege',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'recommended',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'BusinessNotebook';
  }

  public function read($input)
  {
    return $this->_read('BusinessNotebook', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('BusinessNotebook', self::$_TSPEC, $output);
  }
}

class SavedSearch extends TBase {
  static $_TSPEC;

  public $guid = null;
  public $name = null;
  public $query = null;
  public $format = null;
  public $updateSequenceNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'format',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SavedSearch';
  }

  public function read($input)
  {
    return $this->_read('SavedSearch', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('SavedSearch', self::$_TSPEC, $output);
  }
}

class SharedNotebook extends TBase {
  static $_TSPEC;

  public $id = null;
  public $userId = null;
  public $notebookGuid = null;
  public $email = null;
  public $notebookModifiable = null;
  public $requireLogin = null;
  public $serviceCreated = null;
  public $serviceUpdated = null;
  public $shareKey = null;
  public $username = null;
  public $privilege = null;
  public $allowPreview = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'notebookGuid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'notebookModifiable',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'requireLogin',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'serviceCreated',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'serviceUpdated',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'shareKey',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'privilege',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'allowPreview',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SharedNotebook';
  }

  public function read($input)
  {
    return $this->_read('SharedNotebook', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('SharedNotebook', self::$_TSPEC, $output);
  }
}

class NotebookRestrictions extends TBase {
  static $_TSPEC;

  public $noReadNotes = null;
  public $noCreateNotes = null;
  public $noUpdateNotes = null;
  public $noExpungeNotes = null;
  public $noShareNotes = null;
  public $noEmailNotes = null;
  public $noSendMessageToRecipients = null;
  public $noUpdateNotebook = null;
  public $noExpungeNotebook = null;
  public $noSetDefaultNotebook = null;
  public $noSetNotebookStack = null;
  public $noPublishToPublic = null;
  public $noPublishToBusinessLibrary = null;
  public $noCreateTags = null;
  public $noUpdateTags = null;
  public $noExpungeTags = null;
  public $noSetParentTag = null;
  public $noCreateSharedNotebooks = null;
  public $updateWhichSharedNotebookRestrictions = null;
  public $expungeWhichSharedNotebookRestrictions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'noReadNotes',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'noCreateNotes',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'noUpdateNotes',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'noExpungeNotes',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'noShareNotes',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'noEmailNotes',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'noSendMessageToRecipients',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'noUpdateNotebook',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'noExpungeNotebook',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'noSetDefaultNotebook',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'noSetNotebookStack',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'noPublishToPublic',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'noPublishToBusinessLibrary',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'noCreateTags',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'noUpdateTags',
          'type' => TType::BOOL,
          ),
        16 => array(
          'var' => 'noExpungeTags',
          'type' => TType::BOOL,
          ),
        17 => array(
          'var' => 'noSetParentTag',
          'type' => TType::BOOL,
          ),
        18 => array(
          'var' => 'noCreateSharedNotebooks',
          'type' => TType::BOOL,
          ),
        19 => array(
          'var' => 'updateWhichSharedNotebookRestrictions',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'expungeWhichSharedNotebookRestrictions',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NotebookRestrictions';
  }

  public function read($input)
  {
    return $this->_read('NotebookRestrictions', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NotebookRestrictions', self::$_TSPEC, $output);
  }
}

class Notebook extends TBase {
  static $_TSPEC;

  public $guid = null;
  public $name = null;
  public $updateSequenceNum = null;
  public $defaultNotebook = null;
  public $serviceCreated = null;
  public $serviceUpdated = null;
  public $publishing = null;
  public $published = null;
  public $stack = null;
  public $sharedNotebookIds = null;
  public $sharedNotebooks = null;
  public $businessNotebook = null;
  public $contact = null;
  public $restrictions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'defaultNotebook',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'serviceCreated',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'serviceUpdated',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'publishing',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\Publishing',
          ),
        11 => array(
          'var' => 'published',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'stack',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'sharedNotebookIds',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        14 => array(
          'var' => 'sharedNotebooks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\SharedNotebook',
            ),
          ),
        15 => array(
          'var' => 'businessNotebook',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\BusinessNotebook',
          ),
        16 => array(
          'var' => 'contact',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\User',
          ),
        17 => array(
          'var' => 'restrictions',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\NotebookRestrictions',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Notebook';
  }

  public function read($input)
  {
    return $this->_read('Notebook', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Notebook', self::$_TSPEC, $output);
  }
}

class LinkedNotebook extends TBase {
  static $_TSPEC;

  public $shareName = null;
  public $username = null;
  public $shardId = null;
  public $shareKey = null;
  public $uri = null;
  public $guid = null;
  public $updateSequenceNum = null;
  public $noteStoreUrl = null;
  public $webApiUrlPrefix = null;
  public $stack = null;
  public $businessId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'shareName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'shardId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'shareKey',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'uri',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'noteStoreUrl',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'webApiUrlPrefix',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'stack',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'businessId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'LinkedNotebook';
  }

  public function read($input)
  {
    return $this->_read('LinkedNotebook', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('LinkedNotebook', self::$_TSPEC, $output);
  }
}

class NotebookDescriptor extends TBase {
  static $_TSPEC;

  public $guid = null;
  public $notebookDisplayName = null;
  public $contactName = null;
  public $hasSharedNotebook = null;
  public $joinedUserCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'notebookDisplayName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'contactName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'hasSharedNotebook',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'joinedUserCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NotebookDescriptor';
  }

  public function read($input)
  {
    return $this->_read('NotebookDescriptor', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NotebookDescriptor', self::$_TSPEC, $output);
  }
}

class Constants 
{
    public static $CLASSIFICATION_RECIPE_USER_NON_RECIPE = "000";

    public static $CLASSIFICATION_RECIPE_USER_RECIPE = "001";

    public static $CLASSIFICATION_RECIPE_SERVICE_RECIPE = "002";

    public static $EDAM_NOTE_SOURCE_WEB_CLIP = "web.clip";

    public static $EDAM_NOTE_SOURCE_MAIL_CLIP = "mail.clip";

    public static $EDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY = "mail.smtp";
}


