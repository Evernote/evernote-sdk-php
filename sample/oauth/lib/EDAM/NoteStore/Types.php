<?php
namespace EDAM\NoteStore;

/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


class SyncState extends TBase {
  static $_TSPEC;

  public $currentTime = null;
  public $fullSyncBefore = null;
  public $updateCount = null;
  public $uploaded = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'currentTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'fullSyncBefore',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'updateCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'uploaded',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SyncState';
  }

  public function read($input)
  {
    return $this->_read('SyncState', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('SyncState', self::$_TSPEC, $output);
  }
}

class SyncChunk extends TBase {
  static $_TSPEC;

  public $currentTime = null;
  public $chunkHighUSN = null;
  public $updateCount = null;
  public $notes = null;
  public $notebooks = null;
  public $tags = null;
  public $searches = null;
  public $resources = null;
  public $expungedNotes = null;
  public $expungedNotebooks = null;
  public $expungedTags = null;
  public $expungedSearches = null;
  public $linkedNotebooks = null;
  public $expungedLinkedNotebooks = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'currentTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'chunkHighUSN',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'updateCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'notes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Note',
            ),
          ),
        5 => array(
          'var' => 'notebooks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Notebook',
            ),
          ),
        6 => array(
          'var' => 'tags',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Tag',
            ),
          ),
        7 => array(
          'var' => 'searches',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\SavedSearch',
            ),
          ),
        8 => array(
          'var' => 'resources',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Resource',
            ),
          ),
        9 => array(
          'var' => 'expungedNotes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'expungedNotebooks',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'expungedTags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'expungedSearches',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        13 => array(
          'var' => 'linkedNotebooks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\LinkedNotebook',
            ),
          ),
        14 => array(
          'var' => 'expungedLinkedNotebooks',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SyncChunk';
  }

  public function read($input)
  {
    return $this->_read('SyncChunk', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('SyncChunk', self::$_TSPEC, $output);
  }
}

class SyncChunkFilter extends TBase {
  static $_TSPEC;

  public $includeNotes = null;
  public $includeNoteResources = null;
  public $includeNoteAttributes = null;
  public $includeNotebooks = null;
  public $includeTags = null;
  public $includeSearches = null;
  public $includeResources = null;
  public $includeLinkedNotebooks = null;
  public $includeExpunged = null;
  public $includeNoteApplicationDataFullMap = null;
  public $includeResourceApplicationDataFullMap = null;
  public $includeNoteResourceApplicationDataFullMap = null;
  public $requireNoteContentClass = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'includeNotes',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'includeNoteResources',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'includeNoteAttributes',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'includeNotebooks',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'includeTags',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'includeSearches',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'includeResources',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'includeLinkedNotebooks',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'includeExpunged',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'includeNoteApplicationDataFullMap',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'includeResourceApplicationDataFullMap',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'includeNoteResourceApplicationDataFullMap',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'requireNoteContentClass',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SyncChunkFilter';
  }

  public function read($input)
  {
    return $this->_read('SyncChunkFilter', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('SyncChunkFilter', self::$_TSPEC, $output);
  }
}

class NoteFilter extends TBase {
  static $_TSPEC;

  public $order = null;
  public $ascending = null;
  public $words = null;
  public $notebookGuid = null;
  public $tagGuids = null;
  public $timeZone = null;
  public $inactive = null;
  public $emphasized = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ascending',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'words',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'notebookGuid',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'tagGuids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'timeZone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'inactive',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'emphasized',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NoteFilter';
  }

  public function read($input)
  {
    return $this->_read('NoteFilter', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NoteFilter', self::$_TSPEC, $output);
  }
}

class NoteList extends TBase {
  static $_TSPEC;

  public $startIndex = null;
  public $totalNotes = null;
  public $notes = null;
  public $stoppedWords = null;
  public $searchedWords = null;
  public $updateCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startIndex',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'totalNotes',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'notes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Note',
            ),
          ),
        4 => array(
          'var' => 'stoppedWords',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'searchedWords',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'updateCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NoteList';
  }

  public function read($input)
  {
    return $this->_read('NoteList', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NoteList', self::$_TSPEC, $output);
  }
}

class NoteMetadata extends TBase {
  static $_TSPEC;

  public $guid = null;
  public $title = null;
  public $contentLength = null;
  public $created = null;
  public $updated = null;
  public $updateSequenceNum = null;
  public $notebookGuid = null;
  public $tagGuids = null;
  public $attributes = null;
  public $largestResourceMime = null;
  public $largestResourceSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'contentLength',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'created',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'updated',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'notebookGuid',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'tagGuids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        14 => array(
          'var' => 'attributes',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\NoteAttributes',
          ),
        20 => array(
          'var' => 'largestResourceMime',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'largestResourceSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NoteMetadata';
  }

  public function read($input)
  {
    return $this->_read('NoteMetadata', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NoteMetadata', self::$_TSPEC, $output);
  }
}

class NotesMetadataList extends TBase {
  static $_TSPEC;

  public $startIndex = null;
  public $totalNotes = null;
  public $notes = null;
  public $stoppedWords = null;
  public $searchedWords = null;
  public $updateCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startIndex',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'totalNotes',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'notes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\NoteStore\NoteMetadata',
            ),
          ),
        4 => array(
          'var' => 'stoppedWords',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'searchedWords',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'updateCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NotesMetadataList';
  }

  public function read($input)
  {
    return $this->_read('NotesMetadataList', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NotesMetadataList', self::$_TSPEC, $output);
  }
}

class NotesMetadataResultSpec extends TBase {
  static $_TSPEC;

  public $includeTitle = null;
  public $includeContentLength = null;
  public $includeCreated = null;
  public $includeUpdated = null;
  public $includeUpdateSequenceNum = null;
  public $includeNotebookGuid = null;
  public $includeTagGuids = null;
  public $includeAttributes = null;
  public $includeLargestResourceMime = null;
  public $includeLargestResourceSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'includeTitle',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'includeContentLength',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'includeCreated',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'includeUpdated',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'includeUpdateSequenceNum',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'includeNotebookGuid',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'includeTagGuids',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'includeAttributes',
          'type' => TType::BOOL,
          ),
        20 => array(
          'var' => 'includeLargestResourceMime',
          'type' => TType::BOOL,
          ),
        21 => array(
          'var' => 'includeLargestResourceSize',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NotesMetadataResultSpec';
  }

  public function read($input)
  {
    return $this->_read('NotesMetadataResultSpec', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NotesMetadataResultSpec', self::$_TSPEC, $output);
  }
}

class NoteCollectionCounts extends TBase {
  static $_TSPEC;

  public $notebookCounts = null;
  public $tagCounts = null;
  public $trashCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'notebookCounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'tagCounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'trashCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NoteCollectionCounts';
  }

  public function read($input)
  {
    return $this->_read('NoteCollectionCounts', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NoteCollectionCounts', self::$_TSPEC, $output);
  }
}

class NoteEmailParameters extends TBase {
  static $_TSPEC;

  public $guid = null;
  public $note = null;
  public $toAddresses = null;
  public $ccAddresses = null;
  public $subject = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'note',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\Note',
          ),
        3 => array(
          'var' => 'toAddresses',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'ccAddresses',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'subject',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NoteEmailParameters';
  }

  public function read($input)
  {
    return $this->_read('NoteEmailParameters', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NoteEmailParameters', self::$_TSPEC, $output);
  }
}

class NoteVersionId extends TBase {
  static $_TSPEC;

  public $updateSequenceNum = null;
  public $updated = null;
  public $saved = null;
  public $title = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'updateSequenceNum',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'updated',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'saved',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'NoteVersionId';
  }

  public function read($input)
  {
    return $this->_read('NoteVersionId', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NoteVersionId', self::$_TSPEC, $output);
  }
}

class ClientUsageMetrics extends TBase {
  static $_TSPEC;

  public $sessions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessions',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ClientUsageMetrics';
  }

  public function read($input)
  {
    return $this->_read('ClientUsageMetrics', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ClientUsageMetrics', self::$_TSPEC, $output);
  }
}

class RelatedQuery extends TBase {
  static $_TSPEC;

  public $noteGuid = null;
  public $plainText = null;
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'noteGuid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'plainText',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\EDAM\NoteStore\NoteFilter',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'RelatedQuery';
  }

  public function read($input)
  {
    return $this->_read('RelatedQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('RelatedQuery', self::$_TSPEC, $output);
  }
}

class RelatedResult extends TBase {
  static $_TSPEC;

  public $notes = null;
  public $notebooks = null;
  public $tags = null;
  public $containingNotebooks = null;
  public $debugInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'notes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Note',
            ),
          ),
        2 => array(
          'var' => 'notebooks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Notebook',
            ),
          ),
        3 => array(
          'var' => 'tags',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\Tag',
            ),
          ),
        4 => array(
          'var' => 'containingNotebooks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EDAM\Types\NotebookDescriptor',
            ),
          ),
        5 => array(
          'var' => 'debugInfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'RelatedResult';
  }

  public function read($input)
  {
    return $this->_read('RelatedResult', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('RelatedResult', self::$_TSPEC, $output);
  }
}

class RelatedResultSpec extends TBase {
  static $_TSPEC;

  public $maxNotes = null;
  public $maxNotebooks = null;
  public $maxTags = null;
  public $writableNotebooksOnly = null;
  public $includeContainingNotebooks = null;
  public $includeDebugInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'maxNotes',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'maxNotebooks',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'maxTags',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'writableNotebooksOnly',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'includeContainingNotebooks',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'includeDebugInfo',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'RelatedResultSpec';
  }

  public function read($input)
  {
    return $this->_read('RelatedResultSpec', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('RelatedResultSpec', self::$_TSPEC, $output);
  }
}


