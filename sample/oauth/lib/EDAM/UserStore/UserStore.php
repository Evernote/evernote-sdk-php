<?php
namespace EDAM\UserStore;
/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


interface UserStoreIf {
  public function checkVersion($clientName, $edamVersionMajor, $edamVersionMinor);
  public function getBootstrapInfo($locale);
  public function authenticate($username, $password, $consumerKey, $consumerSecret);
  public function authenticateLongSession($username, $password, $consumerKey, $consumerSecret, $deviceIdentifier, $deviceDescription);
  public function authenticateToBusiness($authenticationToken);
  public function refreshAuthentication($authenticationToken);
  public function getUser($authenticationToken);
  public function getPublicUserInfo($username);
  public function getPremiumInfo($authenticationToken);
  public function getNoteStoreUrl($authenticationToken);
}

class UserStoreClient implements \EDAM\UserStore\UserStoreIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function checkVersion($clientName, $edamVersionMajor, $edamVersionMinor)
  {
    $this->send_checkVersion($clientName, $edamVersionMajor, $edamVersionMinor);
    return $this->recv_checkVersion();
  }

  public function send_checkVersion($clientName, $edamVersionMajor, $edamVersionMinor)
  {
    $args = new \EDAM\UserStore\UserStore_checkVersion_args();
    $args->clientName = $clientName;
    $args->edamVersionMajor = $edamVersionMajor;
    $args->edamVersionMinor = $edamVersionMinor;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkVersion()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_checkVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_checkVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkVersion failed: unknown result");
  }

  public function getBootstrapInfo($locale)
  {
    $this->send_getBootstrapInfo($locale);
    return $this->recv_getBootstrapInfo();
  }

  public function send_getBootstrapInfo($locale)
  {
    $args = new \EDAM\UserStore\UserStore_getBootstrapInfo_args();
    $args->locale = $locale;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBootstrapInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBootstrapInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBootstrapInfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_getBootstrapInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_getBootstrapInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBootstrapInfo failed: unknown result");
  }

  public function authenticate($username, $password, $consumerKey, $consumerSecret)
  {
    $this->send_authenticate($username, $password, $consumerKey, $consumerSecret);
    return $this->recv_authenticate();
  }

  public function send_authenticate($username, $password, $consumerKey, $consumerSecret)
  {
    $args = new \EDAM\UserStore\UserStore_authenticate_args();
    $args->username = $username;
    $args->password = $password;
    $args->consumerKey = $consumerKey;
    $args->consumerSecret = $consumerSecret;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'authenticate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('authenticate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_authenticate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_authenticate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_authenticate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->userException !== null) {
      throw $result->userException;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("authenticate failed: unknown result");
  }

  public function authenticateLongSession($username, $password, $consumerKey, $consumerSecret, $deviceIdentifier, $deviceDescription)
  {
    $this->send_authenticateLongSession($username, $password, $consumerKey, $consumerSecret, $deviceIdentifier, $deviceDescription);
    return $this->recv_authenticateLongSession();
  }

  public function send_authenticateLongSession($username, $password, $consumerKey, $consumerSecret, $deviceIdentifier, $deviceDescription)
  {
    $args = new \EDAM\UserStore\UserStore_authenticateLongSession_args();
    $args->username = $username;
    $args->password = $password;
    $args->consumerKey = $consumerKey;
    $args->consumerSecret = $consumerSecret;
    $args->deviceIdentifier = $deviceIdentifier;
    $args->deviceDescription = $deviceDescription;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'authenticateLongSession', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('authenticateLongSession', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_authenticateLongSession()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_authenticateLongSession_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_authenticateLongSession_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->userException !== null) {
      throw $result->userException;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("authenticateLongSession failed: unknown result");
  }

  public function authenticateToBusiness($authenticationToken)
  {
    $this->send_authenticateToBusiness($authenticationToken);
    return $this->recv_authenticateToBusiness();
  }

  public function send_authenticateToBusiness($authenticationToken)
  {
    $args = new \EDAM\UserStore\UserStore_authenticateToBusiness_args();
    $args->authenticationToken = $authenticationToken;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'authenticateToBusiness', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('authenticateToBusiness', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_authenticateToBusiness()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_authenticateToBusiness_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_authenticateToBusiness_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->userException !== null) {
      throw $result->userException;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("authenticateToBusiness failed: unknown result");
  }

  public function refreshAuthentication($authenticationToken)
  {
    $this->send_refreshAuthentication($authenticationToken);
    return $this->recv_refreshAuthentication();
  }

  public function send_refreshAuthentication($authenticationToken)
  {
    $args = new \EDAM\UserStore\UserStore_refreshAuthentication_args();
    $args->authenticationToken = $authenticationToken;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refreshAuthentication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refreshAuthentication', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refreshAuthentication()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_refreshAuthentication_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_refreshAuthentication_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->userException !== null) {
      throw $result->userException;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("refreshAuthentication failed: unknown result");
  }

  public function getUser($authenticationToken)
  {
    $this->send_getUser($authenticationToken);
    return $this->recv_getUser();
  }

  public function send_getUser($authenticationToken)
  {
    $args = new \EDAM\UserStore\UserStore_getUser_args();
    $args->authenticationToken = $authenticationToken;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_getUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_getUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->userException !== null) {
      throw $result->userException;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("getUser failed: unknown result");
  }

  public function getPublicUserInfo($username)
  {
    $this->send_getPublicUserInfo($username);
    return $this->recv_getPublicUserInfo();
  }

  public function send_getPublicUserInfo($username)
  {
    $args = new \EDAM\UserStore\UserStore_getPublicUserInfo_args();
    $args->username = $username;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPublicUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPublicUserInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPublicUserInfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_getPublicUserInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_getPublicUserInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->notFoundException !== null) {
      throw $result->notFoundException;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    if ($result->userException !== null) {
      throw $result->userException;
    }
    throw new \Exception("getPublicUserInfo failed: unknown result");
  }

  public function getPremiumInfo($authenticationToken)
  {
    $this->send_getPremiumInfo($authenticationToken);
    return $this->recv_getPremiumInfo();
  }

  public function send_getPremiumInfo($authenticationToken)
  {
    $args = new \EDAM\UserStore\UserStore_getPremiumInfo_args();
    $args->authenticationToken = $authenticationToken;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPremiumInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPremiumInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPremiumInfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_getPremiumInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_getPremiumInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->userException !== null) {
      throw $result->userException;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("getPremiumInfo failed: unknown result");
  }

  public function getNoteStoreUrl($authenticationToken)
  {
    $this->send_getNoteStoreUrl($authenticationToken);
    return $this->recv_getNoteStoreUrl();
  }

  public function send_getNoteStoreUrl($authenticationToken)
  {
    $args = new \EDAM\UserStore\UserStore_getNoteStoreUrl_args();
    $args->authenticationToken = $authenticationToken;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNoteStoreUrl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNoteStoreUrl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNoteStoreUrl()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EDAM\UserStore\UserStore_getNoteStoreUrl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EDAM\UserStore\UserStore_getNoteStoreUrl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->userException !== null) {
      throw $result->userException;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("getNoteStoreUrl failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class UserStore_checkVersion_args extends TBase {
  static $_TSPEC;

  public $clientName = null;
  public $edamVersionMajor = 1;
  public $edamVersionMinor = 23;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'clientName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'edamVersionMajor',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'edamVersionMinor',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_checkVersion_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_checkVersion_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_checkVersion_args', self::$_TSPEC, $output);
  }
}

class UserStore_checkVersion_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_checkVersion_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_checkVersion_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_checkVersion_result', self::$_TSPEC, $output);
  }
}

class UserStore_getBootstrapInfo_args extends TBase {
  static $_TSPEC;

  public $locale = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'locale',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getBootstrapInfo_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getBootstrapInfo_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getBootstrapInfo_args', self::$_TSPEC, $output);
  }
}

class UserStore_getBootstrapInfo_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EDAM\UserStore\BootstrapInfo',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getBootstrapInfo_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getBootstrapInfo_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getBootstrapInfo_result', self::$_TSPEC, $output);
  }
}

class UserStore_authenticate_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $password = null;
  public $consumerKey = null;
  public $consumerSecret = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'consumerKey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'consumerSecret',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_authenticate_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_authenticate_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_authenticate_args', self::$_TSPEC, $output);
  }
}

class UserStore_authenticate_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $userException = null;
  public $systemException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EDAM\UserStore\AuthenticationResult',
          ),
        1 => array(
          'var' => 'userException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMUserException',
          ),
        2 => array(
          'var' => 'systemException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_authenticate_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_authenticate_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_authenticate_result', self::$_TSPEC, $output);
  }
}

class UserStore_authenticateLongSession_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $password = null;
  public $consumerKey = null;
  public $consumerSecret = null;
  public $deviceIdentifier = null;
  public $deviceDescription = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'consumerKey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'consumerSecret',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'deviceIdentifier',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'deviceDescription',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_authenticateLongSession_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_authenticateLongSession_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_authenticateLongSession_args', self::$_TSPEC, $output);
  }
}

class UserStore_authenticateLongSession_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $userException = null;
  public $systemException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EDAM\UserStore\AuthenticationResult',
          ),
        1 => array(
          'var' => 'userException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMUserException',
          ),
        2 => array(
          'var' => 'systemException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_authenticateLongSession_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_authenticateLongSession_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_authenticateLongSession_result', self::$_TSPEC, $output);
  }
}

class UserStore_authenticateToBusiness_args extends TBase {
  static $_TSPEC;

  public $authenticationToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authenticationToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_authenticateToBusiness_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_authenticateToBusiness_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_authenticateToBusiness_args', self::$_TSPEC, $output);
  }
}

class UserStore_authenticateToBusiness_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $userException = null;
  public $systemException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EDAM\UserStore\AuthenticationResult',
          ),
        1 => array(
          'var' => 'userException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMUserException',
          ),
        2 => array(
          'var' => 'systemException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_authenticateToBusiness_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_authenticateToBusiness_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_authenticateToBusiness_result', self::$_TSPEC, $output);
  }
}

class UserStore_refreshAuthentication_args extends TBase {
  static $_TSPEC;

  public $authenticationToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authenticationToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_refreshAuthentication_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_refreshAuthentication_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_refreshAuthentication_args', self::$_TSPEC, $output);
  }
}

class UserStore_refreshAuthentication_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $userException = null;
  public $systemException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EDAM\UserStore\AuthenticationResult',
          ),
        1 => array(
          'var' => 'userException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMUserException',
          ),
        2 => array(
          'var' => 'systemException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_refreshAuthentication_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_refreshAuthentication_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_refreshAuthentication_result', self::$_TSPEC, $output);
  }
}

class UserStore_getUser_args extends TBase {
  static $_TSPEC;

  public $authenticationToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authenticationToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getUser_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getUser_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getUser_args', self::$_TSPEC, $output);
  }
}

class UserStore_getUser_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $userException = null;
  public $systemException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\User',
          ),
        1 => array(
          'var' => 'userException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMUserException',
          ),
        2 => array(
          'var' => 'systemException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getUser_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getUser_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getUser_result', self::$_TSPEC, $output);
  }
}

class UserStore_getPublicUserInfo_args extends TBase {
  static $_TSPEC;

  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getPublicUserInfo_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getPublicUserInfo_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getPublicUserInfo_args', self::$_TSPEC, $output);
  }
}

class UserStore_getPublicUserInfo_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $notFoundException = null;
  public $systemException = null;
  public $userException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EDAM\UserStore\PublicUserInfo',
          ),
        1 => array(
          'var' => 'notFoundException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMNotFoundException',
          ),
        2 => array(
          'var' => 'systemException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMSystemException',
          ),
        3 => array(
          'var' => 'userException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMUserException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getPublicUserInfo_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getPublicUserInfo_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getPublicUserInfo_result', self::$_TSPEC, $output);
  }
}

class UserStore_getPremiumInfo_args extends TBase {
  static $_TSPEC;

  public $authenticationToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authenticationToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getPremiumInfo_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getPremiumInfo_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getPremiumInfo_args', self::$_TSPEC, $output);
  }
}

class UserStore_getPremiumInfo_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $userException = null;
  public $systemException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Types\PremiumInfo',
          ),
        1 => array(
          'var' => 'userException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMUserException',
          ),
        2 => array(
          'var' => 'systemException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getPremiumInfo_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getPremiumInfo_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getPremiumInfo_result', self::$_TSPEC, $output);
  }
}

class UserStore_getNoteStoreUrl_args extends TBase {
  static $_TSPEC;

  public $authenticationToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authenticationToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getNoteStoreUrl_args';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getNoteStoreUrl_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getNoteStoreUrl_args', self::$_TSPEC, $output);
  }
}

class UserStore_getNoteStoreUrl_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $userException = null;
  public $systemException = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'userException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMUserException',
          ),
        2 => array(
          'var' => 'systemException',
          'type' => TType::STRUCT,
          'class' => '\EDAM\Error\EDAMSystemException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserStore_getNoteStoreUrl_result';
  }

  public function read($input)
  {
    return $this->_read('UserStore_getNoteStoreUrl_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UserStore_getNoteStoreUrl_result', self::$_TSPEC, $output);
  }
}


